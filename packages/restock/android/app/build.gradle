def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// キーストア
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion flutter.compileSdkVersion

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "jp.altive.restock"
        minSdkVersion 23
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
       }
    }

    flavorDimensions "default"
    productFlavors {

        development {
            dimension "default"
            applicationId "jp.altive.rollingstock.development"
        }

        staging {
            dimension "default"
            applicationId "jp.altive.rollingstock"
        }

        production {
            dimension "default"
            applicationId "jp.altive.restock"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            // プロジェクトのリリースビルドタイプのみを対象にコードの縮小、難読化、最適化を有効にします。
            minifyEnabled true

            // Android Gradle プラグインで実行されるリソースの縮小を有効にします。
            shrinkResources true

            // Android Gradle プラグインにパッケージされているデフォルトの ProGuard ルールファイルを含みます。
            // 詳細については、R8 設定ファイルのセクションを参照してください。
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'

        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation "androidx.multidex:multidex:2.0.1"
    // Firebase関係のバージョン問題で出るExceptionを抑制するために以下を追加
    // https://github.com/firebase/firebase-android-sdk/issues/1662
    implementation 'com.google.firebase:firebase-analytics:18.0.0'
    implementation 'com.google.android.gms:play-services-basement:17.5.0'
}

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin
apply plugin: 'com.google.firebase.crashlytics'
